import yacc
from lexing import tokens
import turtle

pattern = turtle.Turtle()   
#PARSER
import yacc

class Node:
     def __init__(self,type,children=None,leaf=None):
          self.type = type
          if children:
               self.children = children
          else:
               self.children = [ ]
          self.leaf = leaf
class Start(Node):
    def  _init_(self,func,opt):
        self.func=func
        self.opt=opt
class Forward(Node):
    def _init_(self,forw,num1):
        self.forw=forw
        self.num1=num1
class Right(Node):
    def _init_(self,rght,num2):
        self.rght=rght
        self.num2=num2
class Loop(Node):
    def _init_(self, num3, stmt):
        self.num3 = num3
        self.stmt = stmt
class Color(Node):
    def _init_(self,col,rgb):
        self.col=col
        self.rgb=rgb
class Pen(Node):
    def _init_(self,size,num4):
        self.size=size
        self.num4=num4


def p_start(p):
    '''start : function 
             | function option'''
    if len(p)==1:
        p[0]=p[1]
    elif len(p)==2:
        p[0]= Start(p[1],p[2])

def p_function(p):
    '''
    function : forward
             | right
             | loop
             | color
             | pen
    '''
    p[0]=p[1] 

def p_empty(p):
    'empty :'
    pass
 
 
def p_option(p):
    '''option : start
              | empty '''
    p[0]=p[1]

def p_forward(p):
    'forward : FORW NUMBER' 
    p[0]= Forward(p[1],p[2])
    #pattern.forward(p[2])
 
def p_right(p):
    'right : RIGHT NUMBER'
    #p[0]=pattern.right(p[2])
    p[0]= Forward(p[1],p[2])

def p_loop(p):
    'loop : LOOP NUMBER LSQB start RSQB '
    i=1
    while i<=p[2]:
        p[0]= Loop(p[2],p[4])
        i+=1


def p_color(p):
    'color : COLOR colors'
    p[0]=Color(p[1],p[2])
def p_colors(p):
    '''colors : BLACK 
              | BLUE
               | GREEN
              | RED '''
    if p[1] == 'S':
        p[0]=pattern.color("black")
    elif p[1] == 'M':
        p[0]=pattern.color("blue")
    elif p[1] == 'Y':
        p[0]=pattern.color("green")
    elif p[1] == 'K':
        p[0]=pattern.color("red")

def p_pen(p):
    'pen : PEN NUMBER'
    p[0]=Pen(p[1],p[2])
    # if p[2] == 1:
    #     p[0]=pattern.pensize(1)
    # elif p[2] == 2:
    #     p[0]=pattern.pensize(3)
    # elif p[2] == 3:
    #     p[0]=pattern.pensize(5)

def p_error(p):
   print("Syntax error in input!")

from lexing import data

# Build the parser

parser=yacc.yacc()

result=parser.parse(data)
turtle.done()
#print (result)
